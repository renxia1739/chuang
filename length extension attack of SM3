#include<iostream>
#include<cstring>
#include<time.h> 
#include<cmath>
#include"sm3.h"

using namespace std;

int main()
{
	uint8_t Hash1[32] = { 0 };
	uint8_t Hash2[32] = { 0 };
	uint8_t Hash3[32] = { 0 };
	uint8_t* hash_len = NULL;
	uint8_t str1[] = { 'a','b','c','d'};
	sm3(str1, strlen((char*)str1), Hash1, hash_len);
	for (int i = 0; i < 32; i++)
	{
		printf("0x%x  ", Hash1[i]);
	}
	cout << endl;
	uint8_t str2[100] = { 0 };
	//66c7f0f4 62eeedd9 d1f2d46b dc10e4e2 4167c487 5cf2f7a2 297da02b 8f4ba8e0
	sm3(str2, 67, Hash2, hash_len);
	for (int i = 0; i < 32; i++)
	{
		printf("0x%x  ", Hash2[i]);
	}
	cout << endl;

	//*********长度扩展攻击*********

	unsigned int temph[8] = { 0 };     //八位16进制中间变量
	unsigned int temp = 0;
	for (int i = 0; i < 8; i++)
	{
		for (int j = 4 * i + 3; j >= 4 * i; j--)
		{
			temp = Hash1[j];
			temp = temp * pow(256, (4 * i + 3 - j));
			temph[i] += temp;
		}
	}
	//消息填充
	int nSrcLen = strlen((char*)str1);
	int NSrcLen = strlen((char*)str1) + 64;
	unsigned int nGroupNum = (nSrcLen + 1 + 8 + 64) / 64;
	unsigned char* ucpMsgBuf = (unsigned char*)malloc(nGroupNum * 64);
	memset(ucpMsgBuf, 0, nGroupNum * 64);
	memcpy(ucpMsgBuf, str1, nSrcLen);
	ucpMsgBuf[nSrcLen] = 0x80;
	int i = 0;
	for (i = 0; i < 8; i++)
	{
		ucpMsgBuf[nGroupNum * 64 - i - 1] = ((unsigned long long)(NSrcLen * 8) >> (i * 8)) & 0xFF;
	}
	//压缩函数
	_CF(ucpMsgBuf, temph);
	free(ucpMsgBuf);
	for (i = 0; i < 8; i++)
	{
		Hash3[i * 4 + 0] = (unsigned char)((temph[i] >> 24) & 0xFF);
		Hash3[i * 4 + 1] = (unsigned char)((temph[i] >> 16) & 0xFF);
		Hash3[i * 4 + 2] = (unsigned char)((temph[i] >> 8) & 0xFF);
		Hash3[i * 4 + 3] = (unsigned char)((temph[i] >> 0) & 0xFF);
	}
	for (int i = 0; i < 32; i++)
	{
		printf("0x%x  ", Hash3[i]);
	}
	cout << endl;
	for (int i = 0; i < 32; i++)
	{
		if (Hash2[i] == Hash3[i])
		{
			if (i != 31)
				continue;
			else
				cout << "伪造成功";
		}
		else
			cout << "伪造失败";
	}
}
